[tool.poetry]
name = "pyfactoring"
version = "0.1.0"
description = "A Python linter that will help you find and refactor copy-paste"
authors = ["Kiriruso <sosnovskix.kir2001@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/Kiriruso/pyfactoring"

[tool.poetry.scripts]
pyfactoring = "pyfactoring.main:main"

[tool.poetry.dependencies]
python = "^3.12"
wheel = "^0.43.0"
colorama = "^0.4.6"
pydantic-settings = "^2.2.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.4"
pytest = "^8.2.0"
pre-commit = "^3.7.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py312"
line-length = 105
exclude = [
    "test/",
    "__init__.py",
]

[tool.ruff.lint]
select = [
    "A",
    "E",
    "W",
    "F",
    "I",
    "N",
    "UP",
    "PL",
    "COM",
]
ignore = [
    "N818",    # exception name
    "N802",    # lowercase func name
    "PLR2004", # magic value
    "PLR0913", # too many arguments in func def
    "UP015",   # unnecessary open mode parameters
]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.pyfactoring]
action = "check"
diff = false
workers = 1
paths = ["."]
chain = ["pyfactoring/pyclones"]
chain_all = false
pack_consts = false
exclude = ["test"]

[tool.pyfactoring.pydioms]
count = 5
length = 20
verbose = false

[tool.pyfactoring.pyclones]
count = 2
length = 4
template_mode = "code"
template_view = false